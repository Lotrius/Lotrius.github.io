{"version":3,"sources":["Components/JS/Nav/Nav.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Nav","className","exact","activeClassName","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Home","loadable","Projects","Resume","Contact","Error","App","fallback","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAyEeA,G,kBApEH,WACV,OACE,yBAAKC,UAAU,mDACb,kBAAC,IAAD,CAASC,OAAK,EAACD,UAAU,eAAeE,gBAAgB,GAAGC,GAAG,KAA9D,eAGA,4BACEH,UAAU,iBACVI,KAAK,SACLC,cAAY,WACZC,cAAY,sBACZC,gBAAc,qBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,UAAU,yBAElB,yBACEA,UAAU,+CACVU,GAAG,sBAEH,wBAAIV,UAAU,kBACZ,4BACE,kBAAC,IAAD,CACEC,OAAK,EACLD,UAAU,kCACVE,gBAAgB,SAChBC,GAAG,KAJL,SASF,4BACE,kBAAC,IAAD,CACEF,OAAK,EACLD,UAAU,kCACVE,gBAAgB,SAChBC,GAAG,aAJL,aASF,4BACE,kBAAC,IAAD,CACEF,OAAK,EACLD,UAAU,kCACVE,gBAAgB,SAChBC,GAAG,WAJL,WASF,4BACE,kBAAC,IAAD,CACEF,OAAK,EACLD,UAAU,kCACVE,gBAAgB,SAChBC,GAAG,YAJL,iBChDNQ,G,MAAOC,aAAS,kBAAM,uDACtBC,EAAWD,aAAS,kBAAM,gCAC1BE,EAASF,aAAS,kBAAM,6DACxBG,EAAUH,aAAS,kBAAM,6DACzBI,EAAQJ,aAAS,kBAAM,gCAmBdK,EAjBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOjB,OAAK,EAACkB,UAAWR,EAAMS,KAAK,MACnC,kBAAC,IAAD,CAAOnB,OAAK,EAACkB,UAAWN,EAAUO,KAAK,cACvC,kBAAC,IAAD,CAAOnB,OAAK,EAACkB,UAAWL,EAAQM,KAAK,YACrC,kBAAC,IAAD,CAAOnB,OAAK,EAACkB,UAAWJ,EAASK,KAAK,aACtC,kBAAC,IAAD,CAAOD,UAAWH,EAAOI,KAAK,UCZpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f734ca7f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport '../../CSS/Nav.css';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav className=\"row navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <NavLink exact className=\"navbar-brand\" activeClassName=\"\" to=\"/\">\r\n        Solomon Kim\r\n      </NavLink>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNavAltMarkup\"\r\n        aria-controls=\"navbarNavAltMarkup\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n      <div\r\n        className=\"collapse navbar-collapse justify-content-end\"\r\n        id=\"navbarNavAltMarkup\"\r\n      >\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <NavLink\r\n              exact\r\n              className=\"Nav__link tab nav-item nav-link\"\r\n              activeClassName=\"active\"\r\n              to=\"/\"\r\n            >\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink\r\n              exact\r\n              className=\"Nav__link tab nav-item nav-link\"\r\n              activeClassName=\"active\"\r\n              to=\"/projects\"\r\n            >\r\n              Projects\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink\r\n              exact\r\n              className=\"Nav__link tab nav-item nav-link\"\r\n              activeClassName=\"active\"\r\n              to=\"/resume\"\r\n            >\r\n              Resume\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink\r\n              exact\r\n              className=\"Nav__link tab nav-item nav-link\"\r\n              activeClassName=\"active\"\r\n              to=\"/contact\"\r\n            >\r\n              Contact\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport loadable from '@loadable/component';\r\nimport 'tachyons';\r\nimport 'animate.css';\r\n\r\nimport Nav from '../Components/JS/Nav/Nav';\r\nimport '../Components/CSS/General.css';\r\n\r\n// Code splitting with loadable component\r\nconst Home = loadable(() => import('../Components/JS/Home/Home'));\r\nconst Projects = loadable(() => import('../Components/JS/Projects/Projects'));\r\nconst Resume = loadable(() => import('../Components/JS/Resume/Resume'));\r\nconst Contact = loadable(() => import('../Components/JS/Contact/Contact'));\r\nconst Error = loadable(() => import('../Components/JS/Error/Error'));\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Nav />\r\n        <Switch>\r\n          <Route exact component={Home} path=\"/\" />\r\n          <Route exact component={Projects} path=\"/projects\" />\r\n          <Route exact component={Resume} path=\"/resume\" />\r\n          <Route exact component={Contact} path=\"/contact\" />\r\n          <Route component={Error} path=\"*\" />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}